<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    /*public function render($request, Exception $exception ){
        if ($exception instanceof NotFoundHttpException){
            return response()->view('errors.404');
        }
    }*/

    /*protected function unauthenticated($request, AuthenticationException $exception)
    {
        //return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
        return $request->expectsJson()
            ? response()->json(['message'=>'Unauthenticated.'],401)
            : redirect()->guest(route('kullanici.oturumac'));
    }*/
    /*protected function redirectTo($request)

    {

        if (! $request->expectsJson()) {

            return route('kullanici.oturumac');

        }

    }*/
}
